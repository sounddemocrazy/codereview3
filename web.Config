<?xml version="1.0" encoding="utf-8"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=301880
  -->
<configuration>
<system.webServer>
<staticContent>
      <remove fileExtension=".woff" /> <!-- In case IIS already has this mime type -->
      <mimeMap fileExtension=".woff" mimeType="application/x-font-woff" />
    </staticContent>  

<!-- http://jasonwatmore.com/post/2016/07/26/angularjs-enable-html5-mode-page-refresh-without-404-errors-in-nodejs-and-iis -->
<!-- http://www.advancesharp.com/blog/1191/angularjs-html5-mode-reloading-page-not-found-solution -->
<!-- If you application giving access permission error it means you have not install URL Rewrite, go ahead and install it -->
<!-- By setting html5mode to true in an AngularJS application it removes the hash (#) prefix from the angular virtual urls, 
a side effect of this is that if you try to navigate directly to a deep link in your angular app or refresh an internal page you may get a 404 page not found error. 
This is because the web server receiving the request looks for a resource matching the full url on the server, 
which doesn't exist because the angular portion of the url refers to a route in your angular application and needs to be handled in the client browser.

The way to fix this is by rewriting all virtual urls to the main angular index.html file, below are examples of how to do this in NodeJS and IIS. -->
    <rewrite>
     <rules> 
      <rule name="AngularMainRule" stopProcessing="true">
        <match url=".*" />
        <conditions logicalGrouping="MatchAll">
          <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />                                 
          <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
        </conditions>
        <action type="Rewrite" url="/" />
      </rule>
    </rules>
    </rewrite>
</system.webServer>
</configuration>